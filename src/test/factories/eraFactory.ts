import { faker } from '@faker-js/faker';

export const createMockERAFile = (overrides: Record<string, any> = {}) => ({
  id: faker.string.uuid(),
  file_name: `ERA_${faker.date.recent().toISOString().split('T')[0]}_${faker.string.alphanumeric(8)}.835`,
  file_content: faker.lorem.paragraphs(3),
  file_size: faker.number.int({ min: 1000, max: 50000 }),
  processing_status: faker.helpers.arrayElement(['Uploaded', 'Parsed', 'Posted', 'Error', 'Partially Posted']),
  interchange_control_number: faker.string.numeric(9),
  transaction_control_number: faker.string.numeric(9),
  payer_id: faker.string.alphanumeric(10),
  payer_name: faker.company.name(),
  payer_address: faker.location.streetAddress(),
  payment_method: faker.helpers.arrayElement(['ACH', 'Check', 'Wire Transfer']),
  payment_amount: faker.number.float({ min: 500, max: 10000, fractionDigits: 2 }),
  payment_date: faker.date.recent().toISOString().split('T')[0],
  check_eft_number: faker.string.alphanumeric(12),
  total_claims: faker.number.int({ min: 1, max: 50 }),
  claims_posted: faker.number.int({ min: 0, max: 50 }),
  claims_failed: faker.number.int({ min: 0, max: 5 }),
  total_service_lines: faker.number.int({ min: 1, max: 100 }),
  error_message: null,
  error_details: null,
  uploaded_by: faker.string.uuid(),
  created_at: faker.date.past().toISOString(),
  updated_at: faker.date.recent().toISOString(),
  ...overrides,
});

export const createMockERAFileList = (count: number = 5) =>
  Array.from({ length: count }, () => createMockERAFile());

export const createMockReconciliationRecord = (overrides: Record<string, any> = {}) => ({
  id: faker.string.uuid(),
  era_file_id: faker.string.uuid(),
  reconciliation_date: faker.date.recent().toISOString().split('T')[0],
  expected_payment_amount: faker.number.float({ min: 500, max: 5000, fractionDigits: 2 }),
  actual_payment_amount: faker.number.float({ min: 500, max: 5000, fractionDigits: 2 }),
  variance_amount: faker.number.float({ min: -100, max: 100, fractionDigits: 2 }),
  reconciliation_status: faker.helpers.arrayElement(['Balanced', 'Unbalanced', 'Under Review', 'Resolved']),
  discrepancies: null,
  resolution_notes: null,
  reconciled_by: faker.string.uuid(),
  resolved_by: null,
  resolved_at: null,
  created_at: faker.date.past().toISOString(),
  era_file: {
    file_name: `ERA_${faker.date.recent().toISOString().split('T')[0]}_${faker.string.alphanumeric(8)}.835`,
    payment_date: faker.date.recent().toISOString().split('T')[0],
  },
  ...overrides,
});

export const createMockEOB = (overrides: Record<string, any> = {}) => ({
  id: faker.string.uuid(),
  claim_id: faker.string.uuid(),
  eob_number: `EOB-${faker.number.int({ min: 10000, max: 99999 })}`,
  eob_date: faker.date.recent().toISOString().split('T')[0],
  patient_name: faker.person.fullName(),
  patient_id: faker.string.uuid(),
  provider_name: 'Mental Space Therapy',
  payer_name: faker.company.name(),
  total_billed: faker.number.float({ min: 100, max: 1000, fractionDigits: 2 }),
  total_allowed: faker.number.float({ min: 80, max: 900, fractionDigits: 2 }),
  total_paid: faker.number.float({ min: 70, max: 850, fractionDigits: 2 }),
  total_patient_responsibility: faker.number.float({ min: 10, max: 150, fractionDigits: 2 }),
  service_lines: [],
  adjustments_summary: [],
  sent_to_patient: faker.datatype.boolean(),
  sent_at: faker.date.recent().toISOString(),
  generated_by: faker.string.uuid(),
  created_at: faker.date.past().toISOString(),
  ...overrides,
});

export const createMockPatientStatement = (overrides: Record<string, any> = {}) => ({
  id: faker.string.uuid(),
  client_id: faker.string.uuid(),
  statement_number: `STMT-${faker.number.int({ min: 10000, max: 99999 })}`,
  statement_date: faker.date.recent().toISOString().split('T')[0],
  statement_period_start: faker.date.past().toISOString().split('T')[0],
  statement_period_end: faker.date.recent().toISOString().split('T')[0],
  previous_balance: faker.number.float({ min: 0, max: 500, fractionDigits: 2 }),
  charges: faker.number.float({ min: 100, max: 1000, fractionDigits: 2 }),
  payments: faker.number.float({ min: 0, max: 500, fractionDigits: 2 }),
  adjustments: faker.number.float({ min: 0, max: 100, fractionDigits: 2 }),
  current_balance: faker.number.float({ min: 50, max: 800, fractionDigits: 2 }),
  amount_0_30_days: faker.number.float({ min: 0, max: 200, fractionDigits: 2 }),
  amount_31_60_days: faker.number.float({ min: 0, max: 200, fractionDigits: 2 }),
  amount_61_90_days: faker.number.float({ min: 0, max: 200, fractionDigits: 2 }),
  amount_over_90_days: faker.number.float({ min: 0, max: 200, fractionDigits: 2 }),
  statement_lines: [],
  statement_status: faker.helpers.arrayElement(['Generated', 'Sent', 'Viewed', 'Paid']),
  delivery_method: null,
  sent_at: null,
  generated_by: faker.string.uuid(),
  created_at: faker.date.past().toISOString(),
  clients: {
    first_name: faker.person.firstName(),
    last_name: faker.person.lastName(),
  },
  ...overrides,
});
