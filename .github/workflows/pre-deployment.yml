name: Pre-Deployment Checks

on:
  pull_request:
    branches: [ main, production ]
  push:
    branches: [ main, production ]
  workflow_dispatch:

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify Environment Variables
        run: |
          node scripts/verify-env.js
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}
          
      - name: TypeScript Type Check
        run: npm run type-check
        
      - name: Lint Code
        run: npm run lint
        continue-on-error: true
        
      - name: Security Audit
        run: npm audit --audit-level=high
        continue-on-error: true
        
      - name: Build Production Bundle
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}
          
      - name: Check Bundle Size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=10485760  # 10MB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Bundle size ($BUNDLE_SIZE bytes) exceeds maximum ($MAX_SIZE bytes)"
            exit 1
          else
            echo "‚úÖ Bundle size ($BUNDLE_SIZE bytes) is acceptable"
          fi
          
      - name: Check for Console Logs
        run: |
          CONSOLE_LOGS=$(grep -r "console.log" src/ --include="*.tsx" --include="*.ts" | wc -l)
          if [ "$CONSOLE_LOGS" -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Found $CONSOLE_LOGS console.log statements"
            grep -r "console.log" src/ --include="*.tsx" --include="*.ts"
          else
            echo "‚úÖ No console.log statements found"
          fi
        continue-on-error: true
        
      - name: Check Critical Files
        run: |
          CRITICAL_FILES=(
            "src/main.tsx"
            "src/App.tsx"
            "src/integrations/supabase/client.ts"
            "index.html"
            "vite.config.ts"
          )
          
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Critical file missing: $file"
              exit 1
            fi
          done
          echo "‚úÖ All critical files present"
          
      - name: Validate Supabase Functions
        run: |
          for func_dir in supabase/functions/*/; do
            if [ ! -f "${func_dir}index.ts" ]; then
              echo "‚ùå Missing index.ts in $(basename $func_dir)"
              exit 1
            fi
          done
          echo "‚úÖ All Supabase functions have index.ts"
          
      - name: Check for Hardcoded Secrets
        run: |
          # Check for common secret patterns
          SECRETS_FOUND=false
          
          if grep -r "sk_live_" src/ --include="*.tsx" --include="*.ts" 2>/dev/null; then
            echo "‚ùå Potential Stripe secret key found"
            SECRETS_FOUND=true
          fi
          
          if grep -r "pk_live_" src/ --include="*.tsx" --include="*.ts" 2>/dev/null; then
            echo "‚ö†Ô∏è Stripe publishable key found (may be okay)"
          fi
          
          if grep -r "password.*=.*[\"'][^\"']{8,}[\"']" src/ --include="*.tsx" --include="*.ts" 2>/dev/null; then
            echo "‚ö†Ô∏è Potential hardcoded password found"
          fi
          
          if [ "$SECRETS_FOUND" = true ]; then
            exit 1
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi
          
      - name: Deployment Summary
        if: always()
        run: |
          echo "=================================="
          echo "üìä Pre-Deployment Check Summary"
          echo "=================================="
          echo ""
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo ""
          echo "Check GitHub Actions logs for detailed results"
          echo "Review any warnings before deploying to production"

  # Optional: Run smoke tests if Playwright is configured
  # smoke-tests:
  #   runs-on: ubuntu-latest
  #   needs: pre-deployment-checks
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - run: npm ci
  #     - run: npx playwright install --with-deps
  #     - run: npm run test:smoke
  #       env:
  #         VITE_SITE_URL: http://localhost:5173
